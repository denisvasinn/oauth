"use strict";function passwordMatcher(r){return r.get("password").value===r.get("confirm").value?null:{nomatch:!0}}var __decorate=this&&this.__decorate||function(r,e,o,n){var s,a=arguments.length,t=a<3?e:null===n?n=Object.getOwnPropertyDescriptor(e,o):n;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)t=Reflect.decorate(r,e,o,n);else for(var i=r.length-1;i>=0;i--)(s=r[i])&&(t=(a<3?s(t):a>3?s(e,o,t):s(e,o))||t);return a>3&&t&&Object.defineProperty(e,o,t),t},__param=this&&this.__param||function(r,e){return function(o,n){e(o,n,r)}};exports.__esModule=!0;var core_1=require("@angular/core"),forms_1=require("@angular/forms"),router_1=require("@angular/router"),auth_service_1=require("./auth.service"),user_1=require("./user"),SignUpComponent=function(){function r(r,e,o){this.user=new user_1.User,this.authService=e,this.router=o,this.form=r.group({name:r.group({first:[this.user.first,forms_1.Validators.compose([forms_1.Validators.required,forms_1.Validators.minLength(2)])],last:[this.user.last,forms_1.Validators.compose([forms_1.Validators.required,forms_1.Validators.minLength(2)])]}),account:r.group({username:[this.user.username,forms_1.Validators.compose([forms_1.Validators.required,forms_1.Validators.minLength(3)])],password:[this.user.password,forms_1.Validators.compose([forms_1.Validators.required,forms_1.Validators.minLength(5)])],confirm:[this.user.confirm,forms_1.Validators.compose([forms_1.Validators.required,forms_1.Validators.minLength(5)])],email:[this.user.email,forms_1.Validators.compose([forms_1.Validators.required,forms_1.Validators.pattern(/[A-Za-z0-9-_\.]+@[\w]+\.([\w]+(\.?)){1,}/)])]},{validator:passwordMatcher})}),this.form.get("account.username").valueChanges.subscribe(function(r){},function(r){console.error(r)})}return r.prototype.onSubmit=function(r){var e=this;r.preventDefault(),this.form.valid?this.authService.register(this.user).subscribe(function(r){r=JSON.parse(r),r.success&&(console.log("successfully registered"),e.router.navigate(["/login"]))},function(r){return console.error(r)}):console.error("Form is not valid")},r}();SignUpComponent=__decorate([core_1.Component({selector:"sign-up-component",template:'\n    <div class="form-container clearfix">\n      <div>\n        <form class="form" [formGroup]="form" (ngSubmit)="onSubmit($event)">\n          <div formGroupName="name">\n            <label>Name</label>\n            <div class="form-group">\n              <input class="form-control" formControlName="first" [(ngModel)]="user.first" placeholder="First">\n            </div>\n            <div class="form-group">\n              <label></label>\n              <input class="form-control" formControlName="last" [(ngModel)]="user.last" placeholder="Last">\n            </div>\n          </div>\n          <div formGroupName="account">\n            <label>Account</label>\n            <div class="form-group">\n              <input class="form-control" formControlName="username" [(ngModel)]="user.username" placeholder="Username">\n            </div>\n            <div class="form-group">\n              <label></label>\n              <input type="password" class="form-control" formControlName="password" [(ngModel)]="user.password" placeholder="Password">\n            </div>\n            <div class="form-group">\n              <label></label>\n              <input type="password" class="form-control" formControlName="confirm" [(ngModel)]="user.confirm" placeholder="Confirm password">\n            </div>\n            <div class="form-group">\n              <label></label>\n              <input class="form-control" formControlName="email" [(ngModel)]="user.email" placeholder="Email">\n            </div>\n          </div>\n          <button class="btn btn-secondary">SUBMIT</button>\n        </form>\n      </div>\n      <p>VALID: {{ form.valid | json }}</p>\n      <p>Username: {{ form.get("account.username").status | json }}</p>\n      <div class="popup" [class.active]="form.dirty && form.invalid">\n        <p>Error</p>\n        <p>All fields are required.</p>\n        <p *ngIf="form.get(\'name.first\').invalid">First name must be at least 2 characters long.</p>\n        <p *ngIf="form.get(\'name.last\').invalid">Last name must be at least 2 characters long.</p>\n        <p *ngIf="form.get(\'account.username\').invalid">Username must be at least 3 characters long.</p>\n        <p *ngIf="form.get(\'account.password\').invalid">Password must be at least 5 characters long.</p>\n        <p *ngIf="form.get(\'account.confirm\').invalid">Confirm password must be at least 5 characters long.</p>\n        <p *ngIf="form.get(\'account.email\').invalid">Wrong email.</p>\n      </div>\n    </div>\n  '}),__param(0,core_1.Inject(forms_1.FormBuilder)),__param(1,core_1.Inject(auth_service_1.AuthService)),__param(2,core_1.Inject(router_1.Router))],SignUpComponent),exports.SignUpComponent=SignUpComponent;